PREFIX fx: <http://sparql.xyz/facade-x/ns/>
PREFIX schema: <http://schema.org/>
PREFIX xyz: <http://sparql.xyz/facade-x/data/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX myns: <http://example.org/myns/>

CONSTRUCT {
    ?bookMyNs a schema:Book .
    ?bookMyNs schema:name ?title .
    ?bookMyNs schema:genre ?seriesMyNs .
    ?bookMyNs schema:url ?webUrl .
    ?bookMyNs schema:description ?characterList .
    ?characterMyNs a schema:Person .
    ?characterMyNs schema:name ?character .
} WHERE {
    SERVICE <x-sparql-anything:location=literaryworks.csv,csv.format=TDF> {
        [] xyz:originalTitle ?title ;
           xyz:series ?seriesRaw ;
           xyz:webUrl ?webUrl ;
           xyz:characters ?charactersRaw .

        # Bind the book IRI
        BIND (IRI(CONCAT("http://example.org/myns/", REPLACE(?title, " ", "_", "i"))) AS ?bookMyNs)

        # Process series into an IRI
        BIND (REPLACE(?seriesRaw, "[\\[\\]\']", "", "i") AS ?seriesClean)
        BIND (IRI(CONCAT("http://example.org/myns/", REPLACE(?seriesClean, " ", "_", "i"))) AS ?seriesMyNs)

        # Process characters into a list
        BIND (REPLACE(?charactersRaw, "[\\[\\]\']", "", "i") AS ?charactersClean)
        BIND (SPLIT(?charactersClean, ", ") AS ?characterList)

        # Unnest the character list and create individual IRIs
        UNNEST(?characterList AS ?character)
        BIND (IRI(CONCAT("http://example.org/myns/", REPLACE(?character, " ", "_", "i"))) AS ?characterMyNs)
    }
}
